// Time complexity o(n) Space complexity o(1)
import java.util.Stack;

class Solution {
    public int calculate(String s) {
        Stack<Integer> st = new Stack<>();
        int currnum = 0;
        char lastexp = '+';
        int n = s.length();
        for (int i = 0; i < n; i++) {
            char c = s.charAt(i);
            if (Character.isDigit(c)) {
                currnum = currnum * 10 + (c - '0');
            }
            if ((!Character.isDigit(c) && c != ' ') || i == n - 1) {
                if (lastexp == '+') {
                    st.push(currnum);
                } else if (lastexp == '-') {
                    st.push(-currnum);
                } else if (lastexp == '*') {
                    st.push(st.pop() * currnum);
                } else if (lastexp == '/') {
                    st.push(st.pop()/currnum);
                }
                lastexp = c;
                currnum = 0;
            }
        }
        int res = 0;
        while (!st.isEmpty()) {
            res += st.pop();
        }
        return res;
    }
}
