//tc: O(n)
//sc:O(n)
//passed on leetcode: yes
class Solution {
    public int calculate(String s) {
        if (s==null || s.length()==0) return 0;
        Stack<Integer> st = new Stack<>();
        int currNum = 0;
        s=s.trim();
        char lastSign = '+';
        for (int i=0; i< s.length(); i++) {
            char c = s.charAt(i);
            if (Character.isDigit(c)) {
                currNum = currNum*10 + c - '0'; //Need not put in a separate condition to check if the next is digit or loop until number is complete, since currNum will still have the value until it enters the below if loop. 
                }
            if ((!Character.isDigit(c) || i==s.length()-1) && c!= ' '){
                if (lastSign=='/') {
                    st.push(st.pop()/(currNum));
                }
                 else if (lastSign=='*') {
                    st.push(st.pop()*(currNum));
                }
                else if (lastSign== '-') {
                    st.push(-currNum);
                }
                else st.push(currNum);
                lastSign = c;
                currNum = 0; //if it enters this loop, then it means it has an operand -- the number is done, so currNum can be made 0
            }
            
        }
        int res = 0;
        while (!st.isEmpty()) {
            res +=st.pop();
            //System.out.println(res);
        }
        return res;
        
    }
}
