//time complexity : O(n)
//space complexity: O(n/2) == O(n)

class BasicCalculatorIIWithStack {
    public int calculate(String s) {
        int result =0;
        Stack<Integer> stack = new Stack<>();
        int n= s.length();
        char lastSign = '+';
        int curr=0;
        for(int i=0; i<n; i++){
            char c= s.charAt(i);
           if(Character.isDigit(c)){
               curr= curr*10+ c-'0';
           }
           if((!Character.isDigit(c) && c!= ' ') || i==n-1){
               if(lastSign == '+'){
                 stack.push(curr);
               }
                else if(lastSign == '-'){
                 stack.push(-curr);
               }
                else if(lastSign == '*'){
                 int popped = stack.pop(); 
                 stack.push(curr*popped);
               }
               else{
                    int popped = stack.pop(); 
                    stack.push(popped/curr);
               }
               curr=0;
               lastSign= c;
           }
        }
        while(!stack.isEmpty()){
            result= result + stack.pop();
        }
        return result;
    }
}
