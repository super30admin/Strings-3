// TC O(N), space complexity : constant
// Test cases: "100000" -> not to be processed in triplets
// trim() One +" " + Hundred + " "+ Twenty + " " Three + " " -> trime space after three
class Solution {
    String[] below20 = {"", "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten", "Eleven", "Twelve", "Thirteen", "Fourteen", "Fifteen", "Sixteen", "Seventeen", "Eighteen", "Nineteen"};
    String[] tens = {"", "", "Twenty", "Thirty", "Forty", "Fifty", "Sixty", "Seventy", "Eighty", "Ninety"};
    String[] thousand = {"", "Thousand", "Million", "Billion"};
    public String numberToWords(int num) {
        if(num == 0)
            return "Zero";
        
        String word = "";
        int idx = 0;
        
        while(num >  0){
            if(num%1000 != 0){ // check if its a triplet or not
                word = helper(num%1000) + thousand[idx] +" "+ word; // if only its a triplet
            }
            num = num/1000;
            idx++;
        }
        return word.trim();
    }
    
    public String helper(int num){
        if(num == 0) return "";
        // < 20
        else if(num < 20)
            return below20[num] +" ";
        // < 99
        else if(num <= 99)
            return tens[num/10] + " "+ helper(num%10);
        // > 99
        else
            return helper(num/100) + "Hundred " + helper(num%100); 
    }
}
